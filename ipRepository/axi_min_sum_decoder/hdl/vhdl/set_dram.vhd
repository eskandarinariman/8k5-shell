-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity set_dram is
port (
    circular_ram_0_dram_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    circular_ram_0_dram_ce0 : OUT STD_LOGIC;
    circular_ram_0_dram_we0 : OUT STD_LOGIC;
    circular_ram_0_dram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    circular_ram_1_dram_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    circular_ram_1_dram_ce0 : OUT STD_LOGIC;
    circular_ram_1_dram_we0 : OUT STD_LOGIC;
    circular_ram_1_dram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    circular_ram_2_dram_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    circular_ram_2_dram_ce0 : OUT STD_LOGIC;
    circular_ram_2_dram_we0 : OUT STD_LOGIC;
    circular_ram_2_dram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_36 : IN STD_LOGIC_VECTOR (1 downto 0);
    i : IN STD_LOGIC_VECTOR (7 downto 0);
    tmp : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of set_dram is 
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal tmp_s_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_read_read_fu_36_p2 : STD_LOGIC_VECTOR (1 downto 0);


begin



    circular_ram_0_dram_address0 <= tmp_s_fu_81_p1(8 - 1 downto 0);
    circular_ram_0_dram_ce0 <= ap_const_logic_1;
    circular_ram_0_dram_d0 <= tmp;

    circular_ram_0_dram_we0_assign_proc : process(tmp_36_read_read_fu_36_p2)
    begin
        if (((tmp_36_read_read_fu_36_p2 = ap_const_lv2_0))) then 
            circular_ram_0_dram_we0 <= ap_const_logic_1;
        else 
            circular_ram_0_dram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    circular_ram_1_dram_address0 <= tmp_s_fu_81_p1(8 - 1 downto 0);
    circular_ram_1_dram_ce0 <= ap_const_logic_1;
    circular_ram_1_dram_d0 <= tmp;

    circular_ram_1_dram_we0_assign_proc : process(tmp_36_read_read_fu_36_p2)
    begin
        if (((tmp_36_read_read_fu_36_p2 = ap_const_lv2_1))) then 
            circular_ram_1_dram_we0 <= ap_const_logic_1;
        else 
            circular_ram_1_dram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    circular_ram_2_dram_address0 <= tmp_s_fu_81_p1(8 - 1 downto 0);
    circular_ram_2_dram_ce0 <= ap_const_logic_1;
    circular_ram_2_dram_d0 <= tmp;

    circular_ram_2_dram_we0_assign_proc : process(tmp_36_read_read_fu_36_p2)
    begin
        if (((not((tmp_36_read_read_fu_36_p2 = ap_const_lv2_0)) and not((tmp_36_read_read_fu_36_p2 = ap_const_lv2_1))))) then 
            circular_ram_2_dram_we0 <= ap_const_logic_1;
        else 
            circular_ram_2_dram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_36_read_read_fu_36_p2 <= tmp_36;
    tmp_s_fu_81_p1 <= std_logic_vector(resize(unsigned(i),64));
end behav;
