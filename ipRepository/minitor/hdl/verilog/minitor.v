// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="minitor,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.912000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=208,HLS_SYN_LUT=331}" *)

module minitor (
        ap_clk,
        ap_rst_n,
        Tvalid_V,
        num_packets_out,
        reset_counter_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_state3 = 4'b100;
parameter    ap_ST_fsm_state4 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [0:0] Tvalid_V;
output  [31:0] num_packets_out;
input  [0:0] reset_counter_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[31:0] num_packets_out;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire    ap_ready;
reg   [31:0] axi_num_packets_out_1_data_reg;
reg    axi_num_packets_out_1_vld_reg;
reg    axi_num_packets_out_1_vld_in;
wire   [0:0] reset_counter_V_read_read_fu_46_p2;
wire   [0:0] ap_CS_fsm_state3;
reg   [31:0] num_packets_fu_34;
wire   [31:0] for_axi_2_fu_99_p3;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] num_packets_1_s_fu_121_p3;
wire   [0:0] ap_CS_fsm_state4;
reg   [0:0] p_s_fu_38;
wire   [0:0] p_026_0_s_fu_106_p2;
reg   [31:0] for_axi_fu_42;
wire   [31:0] for_axi_0_num_packet_fu_129_p3;
reg   [31:0] num_packets_out_preg;
wire   [31:0] num_packets_1_fu_93_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 axi_num_packets_out_1_data_reg = 32'b00000000000000000000000000000000;
#0 axi_num_packets_out_1_vld_reg = 1'b0;
#0 num_packets_out_preg = 32'b00000000000000000000000000000000;
end

minitor_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
minitor_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .axi_num_packets_out(axi_num_packets_out_1_data_reg),
    .axi_num_packets_out_ap_vld(axi_num_packets_out_1_vld_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_packets_out_preg <= ap_const_lv32_0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            num_packets_out_preg <= num_packets_fu_34;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b1 == axi_num_packets_out_1_vld_in) & (1'b0 == axi_num_packets_out_1_vld_reg))) begin
        axi_num_packets_out_1_vld_reg <= 1'b1;
    end else if (((1'b0 == axi_num_packets_out_1_vld_in) & (1'b1 == axi_num_packets_out_1_vld_reg) & 1'b1)) begin
        axi_num_packets_out_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(reset_counter_V_read_read_fu_46_p2 == 1'b0))) begin
        for_axi_fu_42 <= for_axi_0_num_packet_fu_129_p3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        for_axi_fu_42 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(reset_counter_V_read_read_fu_46_p2 == 1'b0))) begin
        num_packets_fu_34 <= num_packets_1_s_fu_121_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (reset_counter_V_read_read_fu_46_p2 == 1'b0))) begin
        num_packets_fu_34 <= for_axi_2_fu_99_p3;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        num_packets_fu_34 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (~(reset_counter_V_read_read_fu_46_p2 == 1'b0)) begin
            p_s_fu_38 <= 1'b1;
        end else if ((reset_counter_V_read_read_fu_46_p2 == 1'b0)) begin
            p_s_fu_38 <= p_026_0_s_fu_106_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b1 == axi_num_packets_out_1_vld_in) & (1'b0 == axi_num_packets_out_1_vld_reg)) | (~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b1 == axi_num_packets_out_1_vld_in) & (1'b1 == axi_num_packets_out_1_vld_reg)))) begin
        axi_num_packets_out_1_data_reg <= for_axi_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_num_packets_out_1_vld_in = 1'b1;
    end else begin
        axi_num_packets_out_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        num_packets_out = num_packets_fu_34;
    end else begin
        num_packets_out = num_packets_out_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign for_axi_0_num_packet_fu_129_p3 = ((p_026_0_s_fu_106_p2[0:0] === 1'b1) ? for_axi_fu_42 : for_axi_2_fu_99_p3);

assign for_axi_2_fu_99_p3 = ((Tvalid_V[0:0] === 1'b1) ? num_packets_1_fu_93_p2 : num_packets_fu_34);

assign num_packets_1_fu_93_p2 = (num_packets_fu_34 + ap_const_lv32_1);

assign num_packets_1_s_fu_121_p3 = ((p_026_0_s_fu_106_p2[0:0] === 1'b1) ? for_axi_2_fu_99_p3 : ap_const_lv32_0);

assign p_026_0_s_fu_106_p2 = (p_s_fu_38 & reset_counter_V);

assign reset_counter_V_read_read_fu_46_p2 = reset_counter_V;

endmodule //minitor
